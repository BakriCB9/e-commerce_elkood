{
    "sourceFile": "lib/core/utils/bloc_observer.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1756057090380,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1756057090380,
            "name": "Commit-0",
            "content": "import 'dart:developer';\r\n\r\nimport 'package:flutter_bloc/flutter_bloc.dart';\r\n\r\nclass MyBlocObserver extends BlocObserver {\r\n  @override\r\n  void onCreate(BlocBase bloc) {\r\n    super.onCreate(bloc);\r\n    log('onCreate -- ${bloc.runtimeType}');\r\n  }\r\n\r\n  @override\r\n  void onEvent(Bloc bloc, Object? event) {\r\n    super.onEvent(bloc, event);\r\n    log('onEvent -- ${bloc.runtimeType}, $event');\r\n  }\r\n\r\n  @override\r\n  void onChange(BlocBase bloc, Change change) {\r\n    super.onChange(bloc, change);\r\n    log('onChange -- ${bloc.runtimeType}, $change');\r\n  }\r\n\r\n  @override\r\n  void onTransition(Bloc bloc, Transition transition) {\r\n    super.onTransition(bloc, transition);\r\n    log('onTransition -- ${bloc.runtimeType}, $transition');\r\n  }\r\n\r\n  @override\r\n  void onError(BlocBase bloc, Object error, StackTrace stackTrace) {\r\n    log('onError -- ${bloc.runtimeType}, $error');\r\n    super.onError(bloc, error, stackTrace);\r\n  }\r\n\r\n  @override\r\n  void onClose(BlocBase bloc) {\r\n    super.onClose(bloc);\r\n    log('onClose -- ${bloc.runtimeType}');\r\n  }\r\n}\r\n"
        }
    ]
}