{
    "sourceFile": "lib/core/network/remote/api_manager.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1756056424453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1756058561531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,10 +15,9 @@\n       final response = await apiCall();\r\n       return SuccessResult<T>(response);\r\n     } on SocketException {\r\n       return FailureResult<T>(\r\n-        InternetConnectionException(\r\n-            message: LocaleKeys.Error_NoInternetConnection.tr()),\r\n+        \r\n       );\r\n     } on DioException catch (e) {\r\n       return _handleDioException<T>(e);\r\n     } on FormatException {\r\n"
                },
                {
                    "date": 1756058571133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n       final response = await apiCall();\r\n       return SuccessResult<T>(response);\r\n     } on SocketException {\r\n       return FailureResult<T>(\r\n-        \r\n+        e\r\n       );\r\n     } on DioException catch (e) {\r\n       return _handleDioException<T>(e);\r\n     } on FormatException {\r\n"
                },
                {
                    "date": 1756058584581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import 'dart:io';\r\n+\r\n+import 'package:dio/dio.dart';\r\n+import 'package:easy_localization/easy_localization.dart';\r\n+import 'package:injectable/injectable.dart';\r\n+\r\n+import '../../../generated/locale_keys.g.dart';\r\n+import '../common/api_result.dart';\r\n+import 'app_exception.dart';\r\n+\r\n+@singleton\r\n+class ApiManager {\r\n+  Future<Result<T>> execute<T>(Future<T> Function() apiCall) async {\r\n+    try {\r\n+      final response = await apiCall();\r\n+      return SuccessResult<T>(response);\r\n+    } on SocketException {\r\n+      return FailureResult<T>(\r\n+        \"no \"\r\n+      );\r\n+    } on DioException catch (e) {\r\n+      return _handleDioException<T>(e);\r\n+    } on FormatException {\r\n+      return FailureResult<T>(\r\n+        DataParsingException(\r\n+            message: LocaleKeys.Error_DataParsingException.tr()),\r\n+      );\r\n+    } catch (e) {\r\n+      return FailureResult<T>(\r\n+        UnknownApiException(message: LocaleKeys.Error_Unexpected_error.tr()),\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  Result<T> _handleDioException<T>(DioException e) {\r\n+    switch (e.type) {\r\n+      case DioExceptionType.connectionTimeout:\r\n+      case DioExceptionType.sendTimeout:\r\n+      case DioExceptionType.receiveTimeout:\r\n+        return FailureResult<T>(\r\n+          ApiTimeoutException(message: _getTimeoutMessage(e.type)),\r\n+        );\r\n+      case DioExceptionType.badCertificate:\r\n+        return FailureResult<T>(\r\n+          CertificateException(\r\n+              message: LocaleKeys.Error_Invalid_certificate.tr()),\r\n+        );\r\n+      case DioExceptionType.badResponse:\r\n+        if (e.response == null) {\r\n+          return FailureResult<T>(UnknownApiException(\r\n+              message: LocaleKeys.Error_Unexpected_server_error.tr()));\r\n+        }\r\n+        return _handleBadResponse<T>(e.response!);\r\n+      case DioExceptionType.cancel:\r\n+        return FailureResult<T>(\r\n+          RequestCancelledException(\r\n+              message: LocaleKeys.Error_Request_cancelled.tr()),\r\n+        );\r\n+      case DioExceptionType.connectionError:\r\n+        return FailureResult<T>(\r\n+          InternetConnectionException(\r\n+              message: LocaleKeys.Error_Connection_failed.tr()),\r\n+        );\r\n+      case DioExceptionType.unknown:\r\n+        return FailureResult<T>(\r\n+          UnknownApiException(\r\n+              message: e.message ?? LocaleKeys.Error_Unexpected_error.tr()),\r\n+        );\r\n+    }\r\n+  }\r\n+\r\n+  Result<T> _handleBadResponse<T>(Response response) {\r\n+    final statusCode = response.statusCode ?? 500;\r\n+    final errorMessage = _extractErrorMessage(response.data);\r\n+\r\n+\r\n+    switch (statusCode) {\r\n+      case 400:\r\n+        return FailureResult<T>(\r\n+          BadRequestException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 401:\r\n+        return FailureResult<T>(\r\n+          UnauthorizedException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 403:\r\n+        return FailureResult<T>(\r\n+          ForbiddenException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 404:\r\n+        return FailureResult<T>(\r\n+          NotFoundException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 500:\r\n+        return FailureResult<T>(\r\n+          InternalServerErrorException(\r\n+            message: errorMessage,\r\n+            statusCode: statusCode,\r\n+          ),\r\n+        );\r\n+      default:\r\n+        return FailureResult<T>(\r\n+          UnknownApiException(\r\n+              message: 'Unexpected error: $statusCode - $errorMessage'),\r\n+        );\r\n+    }\r\n+  }\r\n+\r\n+  String _extractErrorMessage(dynamic data) {\r\n+    if (data is Map<String, dynamic>) {\r\n+      return data['error']?.toString() ??\r\n+          LocaleKeys.Error_Unexpected_server_error.tr();\r\n+    }\r\n+    return data.toString();\r\n+  }\r\n+\r\n+  String _getTimeoutMessage(DioExceptionType type) {\r\n+    switch (type) {\r\n+      case DioExceptionType.connectionTimeout:\r\n+        return LocaleKeys.Error_Connection_timeout.tr();\r\n+      case DioExceptionType.sendTimeout:\r\n+        return LocaleKeys.Error_Send_timeout.tr();\r\n+      case DioExceptionType.receiveTimeout:\r\n+        return LocaleKeys.Error_Receive_timeout.tr();\r\n+      default:\r\n+        return LocaleKeys.Error_Timeout_occurred.tr();\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1756058590883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,129 @@\n+import 'dart:io';\r\n+\r\n+import 'package:dio/dio.dart';\r\n+import 'package:easy_localization/easy_localization.dart';\r\n+import 'package:injectable/injectable.dart';\r\n+\r\n+import '../../../generated/locale_keys.g.dart';\r\n+import '../common/api_result.dart';\r\n+import 'app_exception.dart';\r\n+\r\n+@singleton\r\n+class ApiManager {\r\n+  Future<Result<T>> execute<T>(Future<T> Function() apiCall) async {\r\n+    try {\r\n+      final response = await apiCall();\r\n+      return SuccessResult<T>(response);\r\n+    } on SocketException {\r\n+      return FailureResult<T>(\r\n+        \"no internet connection\"\r\n+      );\r\n+    } on DioException catch (e) {\r\n+      return _handleDioException<T>(e);\r\n+    } on FormatException {\r\n+      return FailureResult<T>(\r\n+        DataParsingException(\r\n+            message: LocaleKeys.Error_DataParsingException.tr()),\r\n+      );\r\n+    } catch (e) {\r\n+      return FailureResult<T>(\r\n+        UnknownApiException(message: LocaleKeys.Error_Unexpected_error.tr()),\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  Result<T> _handleDioException<T>(DioException e) {\r\n+    switch (e.type) {\r\n+      case DioExceptionType.connectionTimeout:\r\n+      case DioExceptionType.sendTimeout:\r\n+      case DioExceptionType.receiveTimeout:\r\n+        return FailureResult<T>(\r\n+          ApiTimeoutException(message: _getTimeoutMessage(e.type)),\r\n+        );\r\n+      case DioExceptionType.badCertificate:\r\n+        return FailureResult<T>(\r\n+          CertificateException(\r\n+              message: LocaleKeys.Error_Invalid_certificate.tr()),\r\n+        );\r\n+      case DioExceptionType.badResponse:\r\n+        if (e.response == null) {\r\n+          return FailureResult<T>(UnknownApiException(\r\n+              message: LocaleKeys.Error_Unexpected_server_error.tr()));\r\n+        }\r\n+        return _handleBadResponse<T>(e.response!);\r\n+      case DioExceptionType.cancel:\r\n+        return FailureResult<T>(\r\n+          RequestCancelledException(\r\n+              message: LocaleKeys.Error_Request_cancelled.tr()),\r\n+        );\r\n+      case DioExceptionType.connectionError:\r\n+        return FailureResult<T>(\r\n+          InternetConnectionException(\r\n+              message: LocaleKeys.Error_Connection_failed.tr()),\r\n+        );\r\n+      case DioExceptionType.unknown:\r\n+        return FailureResult<T>(\r\n+          UnknownApiException(\r\n+              message: e.message ?? LocaleKeys.Error_Unexpected_error.tr()),\r\n+        );\r\n+    }\r\n+  }\r\n+\r\n+  Result<T> _handleBadResponse<T>(Response response) {\r\n+    final statusCode = response.statusCode ?? 500;\r\n+    final errorMessage = _extractErrorMessage(response.data);\r\n+\r\n+\r\n+    switch (statusCode) {\r\n+      case 400:\r\n+        return FailureResult<T>(\r\n+          BadRequestException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 401:\r\n+        return FailureResult<T>(\r\n+          UnauthorizedException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 403:\r\n+        return FailureResult<T>(\r\n+          ForbiddenException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 404:\r\n+        return FailureResult<T>(\r\n+          NotFoundException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 500:\r\n+        return FailureResult<T>(\r\n+          InternalServerErrorException(\r\n+            message: errorMessage,\r\n+            statusCode: statusCode,\r\n+          ),\r\n+        );\r\n+      default:\r\n+        return FailureResult<T>(\r\n+          UnknownApiException(\r\n+              message: 'Unexpected error: $statusCode - $errorMessage'),\r\n+        );\r\n+    }\r\n+  }\r\n+\r\n+  String _extractErrorMessage(dynamic data) {\r\n+    if (data is Map<String, dynamic>) {\r\n+      return data['error']?.toString() ??\r\n+          LocaleKeys.Error_Unexpected_server_error.tr();\r\n+    }\r\n+    return data.toString();\r\n+  }\r\n+\r\n+  String _getTimeoutMessage(DioExceptionType type) {\r\n+    switch (type) {\r\n+      case DioExceptionType.connectionTimeout:\r\n+        return LocaleKeys.Error_Connection_timeout.tr();\r\n+      case DioExceptionType.sendTimeout:\r\n+        return LocaleKeys.Error_Send_timeout.tr();\r\n+      case DioExceptionType.receiveTimeout:\r\n+        return LocaleKeys.Error_Receive_timeout.tr();\r\n+      default:\r\n+        return LocaleKeys.Error_Timeout_occurred.tr();\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1756058641253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,128 @@\n+import 'dart:io';\r\n+\r\n+import 'package:dio/dio.dart';\r\n+import 'package:easy_localization/easy_localization.dart';\r\n+import 'package:injectable/injectable.dart';\r\n+\r\n+import '../../../generated/locale_keys.g.dart';\r\n+import '../common/api_result.dart';\r\n+import 'app_exception.dart';\r\n+\r\n+@singleton\r\n+class ApiManager {\r\n+  Future<Result<T>> execute<T>(Future<T> Function() apiCall) async {\r\n+    try {\r\n+      final response = await apiCall();\r\n+      return SuccessResult<T>(response);\r\n+    } on SocketException {\r\n+      return FailureResult<T>(\r\n+        \"no internet connection\"\r\n+      );\r\n+    } on DioException catch (e) {\r\n+      return _handleDioException<T>(e);\r\n+    } on FormatException {\r\n+      return FailureResult<T>(\r\n+        \"There was an issue processing the data. Please try again or contact support if the issue persists.\"\r\n+      );\r\n+    } catch (e) {\r\n+      return FailureResult<T>(\r\n+        UnknownApiException(message: LocaleKeys.Error_Unexpected_error.tr()),\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  Result<T> _handleDioException<T>(DioException e) {\r\n+    switch (e.type) {\r\n+      case DioExceptionType.connectionTimeout:\r\n+      case DioExceptionType.sendTimeout:\r\n+      case DioExceptionType.receiveTimeout:\r\n+        return FailureResult<T>(\r\n+          ApiTimeoutException(message: _getTimeoutMessage(e.type)),\r\n+        );\r\n+      case DioExceptionType.badCertificate:\r\n+        return FailureResult<T>(\r\n+          CertificateException(\r\n+              message: LocaleKeys.Error_Invalid_certificate.tr()),\r\n+        );\r\n+      case DioExceptionType.badResponse:\r\n+        if (e.response == null) {\r\n+          return FailureResult<T>(UnknownApiException(\r\n+              message: LocaleKeys.Error_Unexpected_server_error.tr()));\r\n+        }\r\n+        return _handleBadResponse<T>(e.response!);\r\n+      case DioExceptionType.cancel:\r\n+        return FailureResult<T>(\r\n+          RequestCancelledException(\r\n+              message: LocaleKeys.Error_Request_cancelled.tr()),\r\n+        );\r\n+      case DioExceptionType.connectionError:\r\n+        return FailureResult<T>(\r\n+          InternetConnectionException(\r\n+              message: LocaleKeys.Error_Connection_failed.tr()),\r\n+        );\r\n+      case DioExceptionType.unknown:\r\n+        return FailureResult<T>(\r\n+          UnknownApiException(\r\n+              message: e.message ?? LocaleKeys.Error_Unexpected_error.tr()),\r\n+        );\r\n+    }\r\n+  }\r\n+\r\n+  Result<T> _handleBadResponse<T>(Response response) {\r\n+    final statusCode = response.statusCode ?? 500;\r\n+    final errorMessage = _extractErrorMessage(response.data);\r\n+\r\n+\r\n+    switch (statusCode) {\r\n+      case 400:\r\n+        return FailureResult<T>(\r\n+          BadRequestException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 401:\r\n+        return FailureResult<T>(\r\n+          UnauthorizedException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 403:\r\n+        return FailureResult<T>(\r\n+          ForbiddenException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 404:\r\n+        return FailureResult<T>(\r\n+          NotFoundException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 500:\r\n+        return FailureResult<T>(\r\n+          InternalServerErrorException(\r\n+            message: errorMessage,\r\n+            statusCode: statusCode,\r\n+          ),\r\n+        );\r\n+      default:\r\n+        return FailureResult<T>(\r\n+          UnknownApiException(\r\n+              message: 'Unexpected error: $statusCode - $errorMessage'),\r\n+        );\r\n+    }\r\n+  }\r\n+\r\n+  String _extractErrorMessage(dynamic data) {\r\n+    if (data is Map<String, dynamic>) {\r\n+      return data['error']?.toString() ??\r\n+          LocaleKeys.Error_Unexpected_server_error.tr();\r\n+    }\r\n+    return data.toString();\r\n+  }\r\n+\r\n+  String _getTimeoutMessage(DioExceptionType type) {\r\n+    switch (type) {\r\n+      case DioExceptionType.connectionTimeout:\r\n+        return LocaleKeys.Error_Connection_timeout.tr();\r\n+      case DioExceptionType.sendTimeout:\r\n+        return LocaleKeys.Error_Send_timeout.tr();\r\n+      case DioExceptionType.receiveTimeout:\r\n+        return LocaleKeys.Error_Receive_timeout.tr();\r\n+      default:\r\n+        return LocaleKeys.Error_Timeout_occurred.tr();\r\n+    }\r\n+  }\r\n+}\r\n"
                },
                {
                    "date": 1756058686386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         \"There was an issue processing the data. Please try again or contact support if the issue persists.\"\r\n       );\r\n     } catch (e) {\r\n       return FailureResult<T>(\r\n-        UnknownApiException(message: LocaleKeys.Error_Unexpected_error.tr()),\r\n+        \"Yikes, something unexpected happened. Please try again or let us know if it keeps occurring!\"\r\n       );\r\n     }\r\n   }\r\n \r\n"
                },
                {
                    "date": 1756058696384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import 'dart:io';\r\n \r\n import 'package:dio/dio.dart';\r\n-\r\n import 'package:injectable/injectable.dart';\r\n \r\n import '../../../generated/locale_keys.g.dart';\r\n import '../common/api_result.dart';\r\n"
                },
                {
                    "date": 1756058702264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,124 @@\n+import 'dart:io';\r\n+import 'package:dio/dio.dart';\r\n+import 'package:injectable/injectable.dart';\r\n+import '../common/api_result.dart';\r\n+import 'app_exception.dart';\r\n+\r\n+@singleton\r\n+class ApiManager {\r\n+  Future<Result<T>> execute<T>(Future<T> Function() apiCall) async {\r\n+    try {\r\n+      final response = await apiCall();\r\n+      return SuccessResult<T>(response);\r\n+    } on SocketException {\r\n+      return FailureResult<T>(\r\n+        \"no internet connection\"\r\n+      );\r\n+    } on DioException catch (e) {\r\n+      return _handleDioException<T>(e);\r\n+    } on FormatException {\r\n+      return FailureResult<T>(\r\n+        \"There was an issue processing the data. Please try again or contact support if the issue persists.\"\r\n+      );\r\n+    } catch (e) {\r\n+      return FailureResult<T>(\r\n+        \"Yikes, something unexpected happened. Please try again or let us know if it keeps occurring!\"\r\n+      );\r\n+    }\r\n+  }\r\n+\r\n+  Result<T> _handleDioException<T>(DioException e) {\r\n+    switch (e.type) {\r\n+      case DioExceptionType.connectionTimeout:\r\n+      case DioExceptionType.sendTimeout:\r\n+      case DioExceptionType.receiveTimeout:\r\n+        return FailureResult<T>(\r\n+          ApiTimeoutException(message: _getTimeoutMessage(e.type)),\r\n+        );\r\n+      case DioExceptionType.badCertificate:\r\n+        return FailureResult<T>(\r\n+          CertificateException(\r\n+              message: LocaleKeys.Error_Invalid_certificate.tr()),\r\n+        );\r\n+      case DioExceptionType.badResponse:\r\n+        if (e.response == null) {\r\n+          return FailureResult<T>(UnknownApiException(\r\n+              message: LocaleKeys.Error_Unexpected_server_error.tr()));\r\n+        }\r\n+        return _handleBadResponse<T>(e.response!);\r\n+      case DioExceptionType.cancel:\r\n+        return FailureResult<T>(\r\n+          RequestCancelledException(\r\n+              message: LocaleKeys.Error_Request_cancelled.tr()),\r\n+        );\r\n+      case DioExceptionType.connectionError:\r\n+        return FailureResult<T>(\r\n+          InternetConnectionException(\r\n+              message: LocaleKeys.Error_Connection_failed.tr()),\r\n+        );\r\n+      case DioExceptionType.unknown:\r\n+        return FailureResult<T>(\r\n+          UnknownApiException(\r\n+              message: e.message ?? LocaleKeys.Error_Unexpected_error.tr()),\r\n+        );\r\n+    }\r\n+  }\r\n+\r\n+  Result<T> _handleBadResponse<T>(Response response) {\r\n+    final statusCode = response.statusCode ?? 500;\r\n+    final errorMessage = _extractErrorMessage(response.data);\r\n+\r\n+\r\n+    switch (statusCode) {\r\n+      case 400:\r\n+        return FailureResult<T>(\r\n+          BadRequestException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 401:\r\n+        return FailureResult<T>(\r\n+          UnauthorizedException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 403:\r\n+        return FailureResult<T>(\r\n+          ForbiddenException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 404:\r\n+        return FailureResult<T>(\r\n+          NotFoundException(message: errorMessage, statusCode: statusCode),\r\n+        );\r\n+      case 500:\r\n+        return FailureResult<T>(\r\n+          InternalServerErrorException(\r\n+            message: errorMessage,\r\n+            statusCode: statusCode,\r\n+          ),\r\n+        );\r\n+      default:\r\n+        return FailureResult<T>(\r\n+          UnknownApiException(\r\n+              message: 'Unexpected error: $statusCode - $errorMessage'),\r\n+        );\r\n+    }\r\n+  }\r\n+\r\n+  String _extractErrorMessage(dynamic data) {\r\n+    if (data is Map<String, dynamic>) {\r\n+      return data['error']?.toString() ??\r\n+          LocaleKeys.Error_Unexpected_server_error.tr();\r\n+    }\r\n+    return data.toString();\r\n+  }\r\n+\r\n+  String _getTimeoutMessage(DioExceptionType type) {\r\n+    switch (type) {\r\n+      case DioExceptionType.connectionTimeout:\r\n+        return LocaleKeys.Error_Connection_timeout.tr();\r\n+      case DioExceptionType.sendTimeout:\r\n+        return LocaleKeys.Error_Send_timeout.tr();\r\n+      case DioExceptionType.receiveTimeout:\r\n+        return LocaleKeys.Error_Receive_timeout.tr();\r\n+      default:\r\n+        return LocaleKeys.Error_Timeout_occurred.tr();\r\n+    }\r\n+  }\r\n+}\r\n"
                }
            ],
            "date": 1756056424453,
            "name": "Commit-0",
            "content": "import 'dart:io';\r\n\r\nimport 'package:dio/dio.dart';\r\nimport 'package:easy_localization/easy_localization.dart';\r\nimport 'package:injectable/injectable.dart';\r\n\r\nimport '../../../generated/locale_keys.g.dart';\r\nimport '../common/api_result.dart';\r\nimport 'app_exception.dart';\r\n\r\n@singleton\r\nclass ApiManager {\r\n  Future<Result<T>> execute<T>(Future<T> Function() apiCall) async {\r\n    try {\r\n      final response = await apiCall();\r\n      return SuccessResult<T>(response);\r\n    } on SocketException {\r\n      return FailureResult<T>(\r\n        InternetConnectionException(\r\n            message: LocaleKeys.Error_NoInternetConnection.tr()),\r\n      );\r\n    } on DioException catch (e) {\r\n      return _handleDioException<T>(e);\r\n    } on FormatException {\r\n      return FailureResult<T>(\r\n        DataParsingException(\r\n            message: LocaleKeys.Error_DataParsingException.tr()),\r\n      );\r\n    } catch (e) {\r\n      return FailureResult<T>(\r\n        UnknownApiException(message: LocaleKeys.Error_Unexpected_error.tr()),\r\n      );\r\n    }\r\n  }\r\n\r\n  Result<T> _handleDioException<T>(DioException e) {\r\n    switch (e.type) {\r\n      case DioExceptionType.connectionTimeout:\r\n      case DioExceptionType.sendTimeout:\r\n      case DioExceptionType.receiveTimeout:\r\n        return FailureResult<T>(\r\n          ApiTimeoutException(message: _getTimeoutMessage(e.type)),\r\n        );\r\n      case DioExceptionType.badCertificate:\r\n        return FailureResult<T>(\r\n          CertificateException(\r\n              message: LocaleKeys.Error_Invalid_certificate.tr()),\r\n        );\r\n      case DioExceptionType.badResponse:\r\n        if (e.response == null) {\r\n          return FailureResult<T>(UnknownApiException(\r\n              message: LocaleKeys.Error_Unexpected_server_error.tr()));\r\n        }\r\n        return _handleBadResponse<T>(e.response!);\r\n      case DioExceptionType.cancel:\r\n        return FailureResult<T>(\r\n          RequestCancelledException(\r\n              message: LocaleKeys.Error_Request_cancelled.tr()),\r\n        );\r\n      case DioExceptionType.connectionError:\r\n        return FailureResult<T>(\r\n          InternetConnectionException(\r\n              message: LocaleKeys.Error_Connection_failed.tr()),\r\n        );\r\n      case DioExceptionType.unknown:\r\n        return FailureResult<T>(\r\n          UnknownApiException(\r\n              message: e.message ?? LocaleKeys.Error_Unexpected_error.tr()),\r\n        );\r\n    }\r\n  }\r\n\r\n  Result<T> _handleBadResponse<T>(Response response) {\r\n    final statusCode = response.statusCode ?? 500;\r\n    final errorMessage = _extractErrorMessage(response.data);\r\n\r\n\r\n    switch (statusCode) {\r\n      case 400:\r\n        return FailureResult<T>(\r\n          BadRequestException(message: errorMessage, statusCode: statusCode),\r\n        );\r\n      case 401:\r\n        return FailureResult<T>(\r\n          UnauthorizedException(message: errorMessage, statusCode: statusCode),\r\n        );\r\n      case 403:\r\n        return FailureResult<T>(\r\n          ForbiddenException(message: errorMessage, statusCode: statusCode),\r\n        );\r\n      case 404:\r\n        return FailureResult<T>(\r\n          NotFoundException(message: errorMessage, statusCode: statusCode),\r\n        );\r\n      case 500:\r\n        return FailureResult<T>(\r\n          InternalServerErrorException(\r\n            message: errorMessage,\r\n            statusCode: statusCode,\r\n          ),\r\n        );\r\n      default:\r\n        return FailureResult<T>(\r\n          UnknownApiException(\r\n              message: 'Unexpected error: $statusCode - $errorMessage'),\r\n        );\r\n    }\r\n  }\r\n\r\n  String _extractErrorMessage(dynamic data) {\r\n    if (data is Map<String, dynamic>) {\r\n      return data['error']?.toString() ??\r\n          LocaleKeys.Error_Unexpected_server_error.tr();\r\n    }\r\n    return data.toString();\r\n  }\r\n\r\n  String _getTimeoutMessage(DioExceptionType type) {\r\n    switch (type) {\r\n      case DioExceptionType.connectionTimeout:\r\n        return LocaleKeys.Error_Connection_timeout.tr();\r\n      case DioExceptionType.sendTimeout:\r\n        return LocaleKeys.Error_Send_timeout.tr();\r\n      case DioExceptionType.receiveTimeout:\r\n        return LocaleKeys.Error_Receive_timeout.tr();\r\n      default:\r\n        return LocaleKeys.Error_Timeout_occurred.tr();\r\n    }\r\n  }\r\n}\r\n"
        }
    ]
}